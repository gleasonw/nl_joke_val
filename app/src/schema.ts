/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/clip": {
    /** Get API clip */
    get: operations["get-api-clip"];
  };
  "/api/clip_counts": {
    /** List API clip counts */
    get: operations["list-api-clip-counts"];
  };
  "/api/emote_growth": {
    /** Get API emote growth */
    get: operations["get-api-emote-growth"];
  };
  "/api/emote_sums": {
    /** Get API emote sums */
    get: operations["get-api-emote-sums"];
  };
  "/api/emotes": {
    /** List API emotes */
    get: operations["list-api-emotes"];
  };
  "/api/hero_all_time_clips": {
    /** List API hero all time clips */
    get: operations["list-api-hero-all-time-clips"];
  };
  "/api/initialize_top_clips": {
    /** Get API initialize top clips */
    get: operations["get-api-initialize-top-clips"];
  };
  "/api/is_live": {
    /** Get API is live */
    get: operations["get-api-is-live"];
  };
  "/api/latest_emote_growth": {
    /** Get API latest emote growth */
    get: operations["get-api-latest-emote-growth"];
  };
  "/api/latest_emote_sums": {
    /** Get API latest emote sums */
    get: operations["get-api-latest-emote-sums"];
  };
  "/api/latest_greatest_series": {
    /** List API latest greatest series */
    get: operations["list-api-latest-greatest-series"];
  };
  "/api/latest_series": {
    /** List API latest series */
    get: operations["list-api-latest-series"];
  };
  "/api/latest_trendiest_series": {
    /** List API latest trendiest series */
    get: operations["list-api-latest-trendiest-series"];
  };
  "/api/next_stream_date": {
    /** Get API next stream date */
    get: operations["get-api-next-stream-date"];
  };
  "/api/previous_stream_date": {
    /** Get API previous stream date */
    get: operations["get-api-previous-stream-date"];
  };
  "/api/refresh_top_clips_store": {
    /** Put API refresh top clips store */
    put: operations["put-api-refresh-top-clips-store"];
  };
  "/api/series": {
    /** List API series */
    get: operations["list-api-series"];
  };
  "/api/series_greatest": {
    /** List API series greatest */
    get: operations["list-api-series-greatest"];
  };
  "/api/thumbnail": {
    /** Get API thumbnail */
    get: operations["get-api-thumbnail"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Clip: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      clip_id: string;
      /** Format: int64 */
      count: number;
      thumbnail: string;
      /** Format: date-time */
      time: string;
    };
    DeletedAt: {
      /** Format: date-time */
      Time: string;
      Valid: boolean;
    };
    Emote: {
      /** Format: int64 */
      BttvId: number;
      ChannelId: string;
      Code: string;
      /** Format: date-time */
      CreatedAt: string;
      DeletedAt: components["schemas"]["DeletedAt"];
      HexColor: string;
      /** Format: int64 */
      ID: number;
      TopClips: components["schemas"]["TopClip"][];
      /** Format: date-time */
      UpdatedAt: string;
      Url: string;
    };
    EmoteFullRow: {
      /** Format: double */
      Average: number;
      Code: string;
      /** Format: double */
      Count: number;
      /** Format: double */
      Difference: number;
      /** Format: int64 */
      EmoteID: number;
      EmoteURL: string;
      /** Format: double */
      PercentDifference: number;
    };
    EmotePerformanceInput: {
      /** Format: date-time */
      Date: string;
      /**
       * @default day
       * @enum {string}
       */
      Grouping: "hour" | "day";
      /**
       * Format: int64
       * @default 20
       */
      Limit: number;
    };
    EmoteReport: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      Emotes: components["schemas"]["EmoteFullRow"][];
      Input: components["schemas"]["EmotePerformanceInput"];
    };
    EmoteSum: {
      Code: string;
      /** Format: int64 */
      EmoteID: number;
      EmoteURL: string;
      HexColor: string;
      /** Format: double */
      Percent: number;
      /** Format: int64 */
      Sum: number;
    };
    EmoteSumInput: {
      /** Format: date-time */
      From: string;
      /**
       * @default minute
       * @enum {string}
       */
      Grouping: "second" | "minute" | "hour" | "day";
      /**
       * Format: int64
       * @default 10
       */
      Limit: number;
      /**
       * @default 9 hours
       * @enum {string}
       */
      Span: "1 minute" | "30 minutes" | "1 hour" | "9 hours";
      /** Format: date-time */
      To: string;
    };
    EmoteSumReport: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      Emotes: components["schemas"]["EmoteSum"][];
      Input: components["schemas"]["EmoteSumInput"];
    };
    EmoteWithClips: {
      clips: components["schemas"]["TopClip"][];
      code: string;
      /** Format: int64 */
      emote_id: number;
      emote_url: string;
      span: string;
      /** Format: int64 */
      sum: number;
    };
    ErrorDetail: {
      /** @description Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
      location?: string;
      /** @description Error message text */
      message?: string;
      /** @description The value at the given location */
      value?: unknown;
    };
    ErrorModel: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      /** @description A human-readable explanation specific to this occurrence of the problem. */
      detail?: string;
      /** @description Optional list of individual error details */
      errors?: components["schemas"]["ErrorDetail"][];
      /**
       * Format: uri
       * @description A URI reference that identifies the specific occurrence of the problem.
       */
      instance?: string;
      /**
       * Format: int64
       * @description HTTP status code
       */
      status?: number;
      /** @description A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
      title?: string;
      /**
       * Format: uri
       * @description A URI reference to human-readable documentation for the error.
       * @default about:blank
       */
      type?: string;
    };
    FetchedClip: {
      ClipID: string;
      /** Format: date-time */
      CreatedAt: string;
      Thumbnail: string;
      /** Format: int64 */
      VodOffset: number;
    };
    LatestEmotePerformanceInput: {
      /**
       * @default hour
       * @enum {string}
       */
      Grouping: "hour" | "day";
      /**
       * Format: int64
       * @default 10
       */
      Limit: number;
    };
    LatestEmoteReport: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      Emotes: components["schemas"]["EmoteFullRow"][];
      Input: components["schemas"]["LatestEmotePerformanceInput"];
    };
    TimeSeries: {
      series: {
        [key: string]: number;
      };
      /** Format: date-time */
      time: string;
    };
    TopClip: {
      Clip: components["schemas"]["FetchedClip"];
      ClipID: string;
      /** Format: int64 */
      Count: number;
      /** Format: date-time */
      CreatedAt: string;
      DeletedAt: components["schemas"]["DeletedAt"];
      Emote: components["schemas"]["Emote"];
      /** Format: int64 */
      EmoteID: number;
      /** Format: int64 */
      ID: number;
      /** Format: int64 */
      Rank: number;
      Span: string;
      /** Format: date-time */
      UpdatedAt: string;
    };
    TwitchClip: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      broadcaster_id: string;
      created_at: string;
      /** Format: double */
      duration: number;
      id: string;
      thumbnail_url: string;
      video_id: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Get API clip */
  "get-api-clip": {
    parameters: {
      query?: {
        time?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Clip"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** List API clip counts */
  "list-api-clip-counts": {
    parameters: {
      query?: {
        emote_id?: number;
        span?: "30 minutes" | "1 hour" | "9 hours" | "1 week" | "1 month" | "1 year" | "all";
        grouping?: "25 seconds" | "1 minute" | "5 minutes" | "15 minutes" | "1 hour" | "1 day";
        order?: "ASC" | "DESC";
        limit?: number;
        from?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Clip"][];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get API emote growth */
  "get-api-emote-growth": {
    parameters: {
      query?: {
        date?: string;
        grouping?: "hour" | "day";
        limit?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmoteReport"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get API emote sums */
  "get-api-emote-sums": {
    parameters: {
      query?: {
        span?: "1 minute" | "30 minutes" | "1 hour" | "9 hours";
        limit?: number;
        from?: string;
        to?: string;
        grouping?: "second" | "minute" | "hour" | "day";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmoteSumReport"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** List API emotes */
  "list-api-emotes": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Emote"][];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** List API hero all time clips */
  "list-api-hero-all-time-clips": {
    parameters: {
      query?: {
        span?: "30 minutes" | "1 hour" | "9 hours" | "1 week" | "1 month" | "1 year" | "all";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmoteWithClips"][];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get API initialize top clips */
  "get-api-initialize-top-clips": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": boolean;
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get API is live */
  "get-api-is-live": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": boolean;
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get API latest emote growth */
  "get-api-latest-emote-growth": {
    parameters: {
      query?: {
        limit?: number;
        grouping?: "hour" | "day";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LatestEmoteReport"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get API latest emote sums */
  "get-api-latest-emote-sums": {
    parameters: {
      query?: {
        span?: "1 minute" | "30 minutes" | "1 hour" | "9 hours" | "custom";
        limit?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmoteSumReport"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** List API latest greatest series */
  "list-api-latest-greatest-series": {
    parameters: {
      query?: {
        span?: "1 minute" | "30 minutes" | "1 hour" | "9 hours";
        grouping?: "second" | "minute" | "hour" | "day" | "week" | "month" | "year";
        rollingAverage?: number;
        from?: string;
        to?: string;
        emote_ids?: number[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TimeSeries"][];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** List API latest series */
  "list-api-latest-series": {
    parameters: {
      query?: {
        span?: "1 minute" | "30 minutes" | "1 hour" | "9 hours";
        grouping?: "second" | "minute" | "hour" | "day" | "week" | "month" | "year";
        rollingAverage?: number;
        from?: string;
        to?: string;
        emote_ids?: number[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TimeSeries"][];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** List API latest trendiest series */
  "list-api-latest-trendiest-series": {
    parameters: {
      query?: {
        span?: "1 minute" | "30 minutes" | "1 hour" | "9 hours";
        grouping?: "second" | "minute" | "hour" | "day" | "week" | "month" | "year";
        rollingAverage?: number;
        from?: string;
        to?: string;
        emote_ids?: number[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TimeSeries"][];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get API next stream date */
  "get-api-next-stream-date": {
    parameters: {
      query?: {
        from?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get API previous stream date */
  "get-api-previous-stream-date": {
    parameters: {
      query?: {
        from?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Put API refresh top clips store */
  "put-api-refresh-top-clips-store": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": boolean;
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** List API series */
  "list-api-series": {
    parameters: {
      query?: {
        span?: "1 minute" | "30 minutes" | "1 hour" | "9 hours";
        grouping?: "second" | "minute" | "hour" | "day" | "week" | "month" | "year";
        rollingAverage?: number;
        from?: string;
        to?: string;
        emote_ids?: number[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TimeSeries"][];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** List API series greatest */
  "list-api-series-greatest": {
    parameters: {
      query?: {
        span?: "1 minute" | "30 minutes" | "1 hour" | "9 hours";
        grouping?: "second" | "minute" | "hour" | "day" | "week" | "month" | "year";
        rollingAverage?: number;
        from?: string;
        to?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TimeSeries"][];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get API thumbnail */
  "get-api-thumbnail": {
    parameters: {
      query?: {
        clip_id?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TwitchClip"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
}
